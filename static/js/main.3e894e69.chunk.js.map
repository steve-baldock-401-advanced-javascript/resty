{"version":3,"sources":["components/Header/header.js","components/Footer/footer.js","components/Form/form.js","components/Detail/detail.js","components/history/history.js","components/help/help.js","components/results/results.js","components/Main/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Footer","Form","props","useState","request","setRequest","useEffect","method","url","data","JSON","stringify","changeMethod","handleSubmit","e","a","preventDefault","parse","handler","onSubmit","id","type","name","placeholder","defaultValue","onChange","target","value","onClick","forhtml","rows","Detail","History","detail","setDetail","calls","showDetail","Object","keys","map","key","apiCall","Help","Results","loading","src","alt","headers","results","Main","setLoading","setResults","history","setHistory","toggleLoading","updateHistory","hash","md5","newhistory","localStorage","setItem","updateResults","updateRequest","console","log","fetchResults","axios","response","getItem","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e894e69.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, NavLink } from 'react-router-dom'\nimport './header.scss';\n\nexport default function Header() {\n  return (\n    <header className=\"Header\">\n      <h1>RESTy</h1>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <NavLink to=\"/history\">History</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/help\">Help</NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\n\n","\n\nimport React from 'react';\nimport './footer.scss';\n\nconst Footer = () => <footer className=\"Footer\">&copy; 2020 Steve Baldock Enterprises</footer>;\n\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport './form.scss';\n\nfunction Form(props) {\n\n  const [request, setRequest] = useState({});\n\n  // Calls set request function when component renders\n  // This only gets called once it is ready\n  useEffect(() => {\n    const method = props.request.method || 'get';\n    const url = props.request.url || '';\n    const data = props.request.data ? JSON.stringify\n    (props.request.data) : '';\n    setRequest({ method, url, data });\n  }, [props, setRequest]);\n\n  // Updates url based on type of request\n  // Spread operator clones object - Acts as an interator\n  const changeURL = (e) => {\n    let url = e.target.value;\n    setRequest({ ...request, url });\n  };\n\n  // \n  const changeMethod = (method) => {\n    setRequest({ ...request, method });\n  };\n\n  const changeBody = (e) => {\n    try {\n      let data = e.target.value;\n      setRequest({ ...request, data });\n    } catch (e) {}\n  \n  };\n\n  // Handles form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let { method, url, data } = request;\n    if(data){\n      data=JSON.parse(data);\n    }\n    props.handler({method, url, data});\n  };\n\n\n    return (\n      <form className=\"Form\" onSubmit={handleSubmit}>\n        <div id=\"enterstuff\">\n            <input id=\"inputurl\" type=\"text\" name=\"url\" placeholder=\"url\" defaultValue={request.url} onChange={changeURL} />\n            <button>Submit</button>\n        </div>\n        <div id=\"radio\">\n          <input type=\"radio\" name=\"rest\" id=\"Get\" value=\"Get\" onClick={() => changeMethod('get')} />\n          <label forhtml=\"Get\">Get</label>\n          <input type=\"radio\" name=\"rest\" id=\"Put\" value=\"Put\" onClick={() => changeMethod('put')} />\n          <label forhtml=\"Put\">Put</label>\n          <input type=\"radio\" name=\"rest\" id=\"Post\" value=\"Post\" onClick={() => changeMethod('post')} />\n          <label forhtml=\"Post\">Post</label>\n          <input type=\"radio\" name=\"rest\" id=\"Delete\" value=\"Delete\" onClick={() => changeMethod('delete')} />\n          <label forhtml=\"Delete\">Delete</label>\n          <textarea id=\"addStuff\" name=\"date\" placeholder=\"Add Body Here\" defaultValue={request.data} rows=\"3\" onChange={changeBody} type=\"text\"/>\n        </div>\n      </form>\n    );\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Detail = (props) => {\n\n  const { method, url, data } = props.request;\n  return (\n    <div>\n      <h6>Method: { method }</h6>\n      <h6>URL: { url }</h6>\n      <h6>Body: { data } </h6>\n    </div>\n  )\n}\n\nexport default Detail","import React, { useState } from 'react';\nimport './history.scss';\nimport Detail from '../Detail/detail.js';\n// import JSONPretty from 'react-json-pretty';\n\n\nconst History = props => {\n\n  const [detail, setDetail] = useState();\n\n  const calls = props.calls || {};\n  function loadRequest(apiCall){\n    props.handler(apiCall);\n    showDetail(apiCall);\n  }\n\n  const showDetail = (request) => {\n    setDetail(<Detail request={request} />)\n  }\n\n  return (\n    <>\n    <aside className=\"history\">\n      <h4>History</h4>\n      <ul>\n        {\n          Object.keys(calls).map(key =>\n            <li key={key}>\n              <span className={`method ${props.calls[key].method}`}>{props.calls[key].url}</span>\n              <button className=\"url\" onClick={() => loadRequest(props.calls[key])}>{props.calls[key].method}</button>\n            </li>,\n          )\n        }\n      </ul>\n    </aside>\n    <aside className=\"results\">\n      {detail ?\n      detail : null} \n    </aside>\n    </>\n  );\n};\n\nexport default History;","// import React from 'react';\n\nconst Help = () => {\n\n}\n\nexport default Help;","import React from 'react';\nimport './results.scss';\nimport ReactJson from 'react-json-view';\n\n\n\nconst Results = (props) => {\n\n  return(\n    <section className=\"results\">\n      { \n        props.loading ? (\n          <div className=\"loading\">\n            <img src=\"https://media.giphy.com/media/IwSG1QKOwDjQk/giphy.gif\" alt=\"loading\" />\n          </div>\n        ) : (\n        props.headers ?\n        <>\n          <h4>Headers</h4>\n          <ReactJson src={props.headers} />\n          <h4>Results</h4>\n          <ReactJson src={props.results} /> \n        </> : \n        null )}\n    </section>\n  )\n} \n\nexport default Results;","import React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport axios from 'axios';\nimport md5 from 'md5';\nimport Form from '../Form/form.js';\n// import List from '../list/list';\nimport History from '../history/history.js';\nimport Help from '../help/help.js';\n// import Home from '../Home/home.js';\nimport Results from '../results/results.js';\n\n\n// Building main as my main center for routes\nconst Main = props => {\n\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState({});\n  const [history, setHistory] = useState({});\n  const [request, setRequest] = useState({});\n\n\n  // This is saying, if this function is called (in fetch) and there is no loading state, then run the function\n  const toggleLoading = () => {\n   setLoading(loading => !loading);\n  }\n\n  // // This is saying, take search results, convert (stringify) and place in local storage\n  // // MD5 is a hashing algorithm that is no longer widely used - too many exposed hash tables\n  const updateHistory = (request) => {\n    let hash = md5(JSON.stringify(request));\n\n    const newhistory = { ...history, [hash]: request }\n\n      setHistory (newhistory)\n      localStorage.setItem('history', JSON.stringify(newhistory));\n  }\n\n  // // This is setting state for result to be returned from API call\n  const updateResults = (headers, results) => {\n    setResults({ headers, results });\n  };\n\n  // // This is a function that initiates changing the form to reflect what method requested\n  const updateRequest = (request) => {\n    console.log(request)\n    setRequest(request);\n  };\n\n  // //this handles the submit, triggering the appropriate functions listed below asynchronously or sends back an error\n  const fetchResults = async (request) => {\n    try {\n      toggleLoading();\n      updateRequest(request);\n      let response = await axios(request);\n      toggleLoading();\n      updateHistory(request);\n      updateResults(response.headers, response.data);\n    }\n    catch (e) {\n      console.log(e);\n    }\n  }\n\n  // // Waits for component to mount to DOM or render\n  // Pulling from local storage\n  // Dependency array is vital\n  useEffect(() => {\n    let history = JSON.parse(localStorage.getItem('history'));\n     setHistory(history);\n  }, [setHistory]);\n\n  return (\n    <main>\n      <Switch>\n        <Route exact path=\"/\">\n          {/* <Home /> */}\n        <Form request={request} handler={fetchResults} />\n        <Results loading={loading} headers={results.headers} results={results.results} />\n        </Route>\n        <Route exact path=\"/history\">\n          <History handler={updateRequest} calls={history} />\n        </Route>\n        <Route exact path=\"/help\">\n          <Help />\n        </Route>\n      </Switch>\n    </main >\n  );\n};\n\nexport default Main;\n\n      ","import React from 'react';\nimport './App.css';\nimport './app.scss';\nimport { BrowserRouter } from 'react-router-dom';\nimport Header from './components/Header/header.js';\nimport Footer from './components/Footer/footer.js';\nimport Main from './components/Main/main.js';\n\n\nconst App = props => {\n    return (\n      <BrowserRouter>\n        <Header />\n        <Main />\n        <Footer />\n      </BrowserRouter>\n    );\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}