{"version":3,"sources":["components/Header/header.js","components/Footer/footer.js","components/Form/form.js","components/results/results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Form","props","handleSubmit","event","a","preventDefault","fetch","state","url","raw","headers","forEach","val","key","json","data","count","results","handler","handleUrl","e","target","value","setState","handleMethod","method","handleClick","onSubmit","this","id","type","placeholder","onChange","name","for","React","Component","Results","App","handleForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WAKe,SAASA,IACtB,OACE,4BAAQC,UAAU,UAChB,sC,UCDSC,EAFA,kBAAM,4BAAQD,UAAU,UAAlB,wC,uBCFAE,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,aATmB,uCASJ,WAAMC,GAAN,uBAAAC,EAAA,6DACbD,EAAME,iBADO,SAEGC,MAAM,EAAKC,MAAMC,KAFpB,cAETC,EAFS,OAGTC,EAAU,GACdD,EAAIC,QAAQC,SAAQ,SAACC,EAAKC,GAAN,OAAcH,EAAQG,GAAOD,KAJpC,SAKIH,EAAIK,OALR,OAKTC,EALS,OAMTC,EAAQD,EAAKC,MACbC,EAAUF,EAAKE,QACnB,EAAKhB,MAAMiB,QAAQF,EAAOC,EAASP,GARtB,4CATI,wDAoBnBS,UAAY,SAAAC,GACV,IAAIZ,EAAMY,EAAEC,OAAOC,MACnB,EAAKC,SAAS,CAAEf,SAtBC,EA0BnBgB,aAAe,SAAAJ,GACbA,EAAEf,iBACF,IAAIoB,EAASL,EAAEC,OAAOC,MACtB,EAAKC,SAAS,CAAEE,YA7BC,EAgCnBC,YAAc,SAAAN,GACZA,EAAEf,iBACF,IAAIG,EAAM,EAAKD,MAAMC,IACrB,EAAKe,SAAS,CAAEf,SAjChB,EAAKD,MAAQ,CACXkB,OAAQ,GACRjB,IAAK,IAJU,E,qDAuCjB,OACE,0BAAMV,UAAU,OAAO6B,SAAUC,KAAK1B,cACpC,yBAAK2B,GAAG,cACJ,2BAAOA,GAAG,WAAWC,KAAK,OAAOC,YAAY,MAAMC,SAAUJ,KAAKT,YAClE,2CAEJ,yBAAKa,SAAUJ,KAAKJ,aAAcK,GAAG,SACnC,2BAAOC,KAAK,QAAQG,KAAK,OAAOJ,GAAG,MAAMP,MAAM,QAC/C,2BAAOY,IAAI,OAAX,OACA,2BAAOJ,KAAK,QAAQG,KAAK,OAAOJ,GAAG,MAAMP,MAAM,QAC/C,2BAAOY,IAAI,OAAX,OACA,2BAAOJ,KAAK,QAAQG,KAAK,OAAOJ,GAAG,OAAOP,MAAM,SAChD,2BAAOY,IAAI,QAAX,QACA,2BAAOJ,KAAK,QAAQG,KAAK,OAAOJ,GAAG,SAASP,MAAM,WAClD,2BAAOY,IAAI,UAAX,UACA,2BAAOL,GAAG,WAAWE,YAAY,gBAAgBD,KAAK,e,GAvD9BK,IAAMC,Y,wBCWzBC,EAVC,SAACpC,GACf,OACE,yBAAKH,UAAU,WACb,sCAAYG,EAAMe,MAAlB,KACA,kBAAC,IAAD,CAAYD,KAAMd,EAAMS,UACxB,kBAAC,IAAD,CAAYK,KAAMd,EAAMgB,YC2BfqB,E,kDA1Bb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IAQRsC,WAAa,SAACvB,EAAOC,EAASP,GAC5B,EAAKa,SAAS,CAAEP,QAAOC,UAASP,aARhC,EAAKH,MAAQ,CACXS,MAAO,EACPC,QAAS,GACTP,QAAS,IALM,E,qDAcjB,OACE,oCACE,kBAACb,EAAD,MACA,kBAAC,EAAD,CAAM6B,YAAaE,KAAKW,aAExB,kBAAC,EAAD,CAASvB,MAAOY,KAAKrB,MAAMS,MAAOC,QAASW,KAAKrB,MAAMU,QAASP,QAASkB,KAAKrB,MAAMG,UACnF,kBAAC,EAAD,W,GArBUyB,IAAMC,WCGJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59fb57b5.chunk.js","sourcesContent":["\n\nimport React from 'react';\nimport './header.scss';\n\nexport default function Header() {\n  return (\n    <header className=\"Header\">\n      <h1>RESTy</h1>\n    </header>\n  );\n};\n\n\n","\n\nimport React from 'react';\nimport './footer.scss';\n\nconst Footer = () => <footer className=\"Footer\">&copy; 2020 Steve Baldock Enterprises</footer>;\n\nexport default Footer;","import React from 'react';\nimport './form.scss';\n\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      method: '',\n      url: '',\n    };\n  }\n\n  // keep working on this\n  handleSubmit = async event => {\n    event.preventDefault();\n    let raw = await fetch(this.state.url);\n    let headers = {};\n    raw.headers.forEach((val, key) => headers[key] = val);\n    let data = await raw.json();\n    let count = data.count;\n    let results = data.results;\n    this.props.handler(count, results, headers);\n  };\n\n  handleUrl = e => {\n    let url = e.target.value;\n    this.setState({ url });\n  };\n\n  // Do I need this?\n  handleMethod = e => {\n    e.preventDefault();\n    let method = e.target.value;\n    this.setState({ method });\n  };\n\n  handleClick = e => {\n    e.preventDefault();\n    let url = this.state.url\n    this.setState({ url });\n  };\n\n  render() {\n    return (\n      <form className=\"Form\" onSubmit={this.handleSubmit}>\n        <div id=\"enterstuff\">\n            <input id=\"inputurl\" type=\"text\" placeholder=\"url\" onChange={this.handleUrl} />\n            <button>Submit</button>\n        </div>\n        <div onChange={this.handleMethod} id=\"radio\">\n          <input type=\"radio\" name=\"rest\" id=\"Get\" value=\"Get\"></input>\n          <label for=\"Get\">Get</label>\n          <input type=\"radio\" name=\"rest\" id=\"Put\" value=\"Put\"  ></input>\n          <label for=\"Put\">Put</label>\n          <input type=\"radio\" name=\"rest\" id=\"Post\" value=\"Post\" ></input>\n          <label for=\"Post\">Post</label>\n          <input type=\"radio\" name=\"rest\" id=\"Delete\" value=\"Delete\" ></input>\n          <label for=\"Delete\">Delete</label>\n          <input id=\"addStuff\" placeholder=\"Add Body Here\" type=\"text\"></input>\n        </div>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './results.scss';\nimport JSONPretty from 'react-json-pretty';\n\nconst Results = (props) => {\n  return(\n    <div className=\"results\">\n      <h3>Count: {props.count} </h3>\n      <JSONPretty data={props.headers}></JSONPretty>\n      <JSONPretty data={props.results}></JSONPretty>\n    </div>\n  )\n} \n\nexport default Results","import React from 'react';\nimport './App.css';\nimport './app.scss';\nimport Header from './components/Header/header.js';\nimport Footer from './components/Footer/footer.js';\nimport Form from './components/Form/form.js';\nimport Results from './components/results/results.js';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      results: [],\n      headers: {},\n    };\n  }\n\n  handleForm = (count, results, headers) => {\n    this.setState({ count, results, headers });\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Form handleClick={this.handleForm} />\n        {/* <History /> */}\n        <Results count={this.state.count} results={this.state.results} headers={this.state.headers} />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}